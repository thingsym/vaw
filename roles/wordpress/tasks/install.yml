---
- name: WordPress db check
  ansible.builtin.command: wp --path={{ WP_PATH }} db check
  become: yes
  become_user: vagrant
  register: db_check
  failed_when: false
  changed_when: false

- name: database drop
  when: db_check.rc == 0
  ansible.builtin.command: wp --path={{ WP_PATH }} db drop --yes
  become: yes
  become_user: vagrant

- name: remove MySQL user for WordPress
  when: ansible_distribution == 'Debian'
  community.mysql.mysql_user:
    name: "{{ db_user }}"
    host_all: yes
    state: absent
    login_user: root
    login_password: "{{ db_root_password }}"
    login_unix_socket: /tmp/mysql.sock

- name: Setup MySQL user for WordPress
  community.mysql.mysql_user:
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    host: "{{ item }}"
    priv: "{{ db_name }}.*:ALL"
    state: present
    login_user: root
    login_password: "{{ db_root_password }}"
    login_unix_socket: /tmp/mysql.sock
  with_items:
    - localhost
    - 127.0.0.1
    - ::1
  no_log: True

- name: stat WP_PATH
  ansible.builtin.stat:
    path: "{{ WP_PATH }}"
  register: is_wordpress_path

- name: mkdir wordpress_path
  when: not is_wordpress_path.stat.exists
  ansible.builtin.file:
    path: "{{ WP_PATH }}"
    state: directory
    recurse: yes

- name: stat site_path
  ansible.builtin.stat:
    path: "{{ DOCUMENT_ROOT }}{{ wp_site_path }}"
  register: is_site_path

- name: mkdir site_path
  when: not is_site_path.stat.exists
  ansible.builtin.file:
    path: "{{ DOCUMENT_ROOT }}{{ wp_site_path }}"
    state: directory
    recurse: yes

- name: WordPress latest installed
  when: version == "latest"
  ansible.builtin.command: wp --path={{ WP_PATH }} core download --locale={{ lang }} --force
  become: yes
  become_user: vagrant

- name: WordPress version installed
  when: version != "latest"
  ansible.builtin.command: wp --path={{ WP_PATH }} core download --locale={{ lang }} --version={{ version }} --force
  become: yes
  become_user: vagrant

- name: stat wp-config.php
  ansible.builtin.stat:
    path: "{{ WP_PATH }}/wp-config.php"
  register: is_old_wp_config

- name: delete WordPress config
  when: is_old_wp_config.stat.exists
  ansible.builtin.file:
    path: "{{ WP_PATH }}/wp-config.php"
    state: absent

- name: stat wp-config.php
  ansible.builtin.stat:
    path: "{{ WP_PATH }}/wp-config.php"
  register: is_old_wp_config

- name: WordPress config
  when: not is_old_wp_config.stat.exists
  ansible.builtin.command: wp --path={{ WP_PATH }} core config --dbhost={{ db_host }} --dbname={{ db_name }} --dbuser={{ db_user }} --dbpass={{ db_password }} --locale={{ lang }} --dbprefix={{ db_prefix }} --dbcharset={{ db_charset }} --dbcollate={{ db_collate }}
  become: yes
  become_user: vagrant

- name: WordPress db check
  ansible.builtin.command: wp --path={{ WP_PATH }} db check
  become: yes
  become_user: vagrant
  register: db_check
  failed_when: false
  changed_when: false

- name: WordPress db create
  when: db_check.rc != 0
  ansible.builtin.command: wp --path={{ WP_PATH }} db create
  become: yes
  become_user: vagrant

- name: WordPress core install
  when: not multisite
  ansible.builtin.command: wp --path={{ WP_PATH }} core install --url={{ WP_URL }} --title='{{ title }}' --admin_user={{ admin_user }} --admin_password={{ admin_password }} --admin_email={{ admin_email }}
  become: yes
  become_user: vagrant

- name: WordPress multisite core install
  when: multisite
  ansible.builtin.command: wp --path={{ WP_PATH }} core multisite-install --url={{ WP_URL }} --title='{{ title }}' --admin_user={{ admin_user }} --admin_password={{ admin_password }} --admin_email={{ admin_email }}
  become: yes
  become_user: vagrant

- name: .htaccess changed
  when:
    - multisite
    - server == "apache"
  ansible.builtin.template:
    src: wordpress.multisite.htaccess.j2
    dest: "{{ WP_PATH }}/.htaccess"
    mode: "0644"

- name: set WP_DEBUG in wp-config.php
  ansible.builtin.replace:
    dest: "{{ WP_PATH }}/wp-config.php"
    regexp: '\n/\* That'
    replace: "define( 'WP_DEBUG', {{ WP_DEBUG }} );\n\n/* That"

- name: set SAVEQUERIES in wp-config.php
  ansible.builtin.replace:
    dest: "{{ WP_PATH }}/wp-config.php"
    regexp: '\n/\* That'
    replace: "define( 'SAVEQUERIES', {{ SAVEQUERIES }} );\n\n/* That"

- name: set SSL in wp-config.php
  when: ssl
  ansible.builtin.replace:
    dest: "{{ WP_PATH }}/wp-config.php"
    regexp: '\n/\* That'
    replace: "// define( 'FORCE_SSL_LOGIN', true );\ndefine( 'FORCE_SSL_ADMIN', true );\n\n/* That"

- name: subdirectory install
  when: wp_site_path != wp_dir
  block:
  - name: change wp option for subdirectory install
    ansible.builtin.command: wp --path={{ WP_PATH }} option update siteurl 'http://{{ HOSTNAME }}{{ wp_dir }}'
    become: yes
    become_user: vagrant

  - name: copy index.php for subdirectory install
    ansible.builtin.copy:
      src: "{{ DOCUMENT_ROOT }}{{ wp_dir }}/index.php"
      dest: "{{ DOCUMENT_ROOT }}{{ wp_site_path }}/index.php"
      mode: "0644"

  - name: change load path in index.php for subdirectory install
    ansible.builtin.replace:
      dest: "{{ DOCUMENT_ROOT }}{{ wp_site_path }}/index.php"
      regexp: "'/wp-blog-header.php'"
      replace: "'{{ wp_dir }}/wp-blog-header.php'"

  - name: copy .htaccess for subdirectory install
    when:
      - multisite
      - server == "apache"
    ansible.builtin.copy:
      src: "{{ DOCUMENT_ROOT }}{{ wp_dir }}/.htaccess"
      dest: "{{ DOCUMENT_ROOT }}{{ wp_site_path }}/.htaccess"
      mode: "0644"

- name: themes install
  when:
    - "themes"
  ansible.builtin.command: wp --path={{ WP_PATH }} theme install {{ item }}
  become: yes
  become_user: vagrant
  with_items:
    - "{{ themes | default([]) }}"

- name: theme install and activate
  when:
    - "activate_theme"
  ansible.builtin.command: wp --path={{ WP_PATH }} theme install {{ activate_theme }} --activate
  become: yes
  become_user: vagrant

- name: plugin activate wp-multibyte-patch
  when: lang == "ja"
  ansible.builtin.command: wp --path={{ WP_PATH }} plugin activate wp-multibyte-patch
  become: yes
  become_user: vagrant

- name: plugins install and activate
  when: "activate_plugins"
  ansible.builtin.command: wp --path={{ WP_PATH }} plugin install {{ item }} --activate
  become: yes
  become_user: vagrant
  with_items:
    - "{{ activate_plugins | default([]) }}"

- name: plugins install
  when: "plugins"
  ansible.builtin.command: wp --path={{ WP_PATH }} plugin install {{ item }}
  become: yes
  become_user: vagrant
  with_items:
    - "{{ plugins | default([]) }}"
