[{"content":"VAW (Vagrant Ansible WordPress) The VAW (Vagrant Ansible WordPress) is Ansible playbooks for website developer, designer, webmaster and WordPress theme/plugin developer. Launch the development environment in Vagrant, you can build the website and verify the operation of the website. Of course, you can also develop WordPress themes and plugins.\nThe VAW is also a collaboration tool. You can take advantage of collaboration tool that share the environment with development partners, designers and clients.\n","date":1542882375,"description":"","lastmod":"2020-10-18T15:26:15Z","objectID":"3976528693a0108357f4928017600865","permalink":"https://thingsym.github.io/vaw/","title":""},{"content":"Features 1. Build Server and Database environment The VAW will build server from Apache, nginx or H2O, and build database from MariaDB, MySQL or Percona MySQL.\nOn all web servers, FastCGI configuration is possible. Build PHP execution environment from PHP-FPM (FastCGI Process Manager) or HHVM (HipHop Virtual Machine).\nBy default, the server and the databese is installed in the default settings. Also you can edit configuration files.\nYou can validate on the server and the database of various combinations.\n2. Build WordPress environment The VAW will build a WordPress which has been processed in a variety of settings and data.\nYou can verify the test data or real data on WordPress. The VAW will realize building of WordPress synchronized with the data and files in the production environment.\n Install specified version WordPress Core Install WordPress Core in Your Language Install to specified directory, or subdirectory install Multisite support Administration Over SSL support Install theme  Automatic activate Batch install multiple themes Install the theme in the local path (developing theme and official directory unregistered theme support)   Install plugin  Automatic activate Batch install multiple plugins Install the plugin in the local path (developing plugin and official directory unregistered plugin support)   Setting theme_mod (theme modification value) and Options Setting permalink structure Importing data from any one of 4 ways  WordPress export (WXR) file SQL file (database dump data) Backup plugin \u0026amp;ldquo;BackWPup\u0026amp;rdquo; archive file (Zip, Tar, Tar GZip, Tar BZip2) Theme Unit Test   Automatically place wp-content directory Automatically place uploads directory Replacement to the URL of the test environment from the URL of the production environment Regenerate thumbnails  3. Develop \u0026amp;amp; Deploy Tools Pre-installing PHP version managment \u0026amp;lsquo;phpenv\u0026amp;rsquo;, Dependency Manager for PHP \u0026amp;lsquo;Composer\u0026amp;rsquo;, command-line tools for WordPress …","date":1542882375,"description":"","lastmod":"2018-11-22T10:26:15Z","objectID":"a69934980f795699f7cc4d8a50a604b2","permalink":"https://thingsym.github.io/vaw/about/","publishdate":"2018-11-22T10:26:15Z","title":"About VAW"},{"content":"[0.7.4] - 2020.10.18  improve npm-installer.sh remove develop tools, migrate to project\u0026amp;rsquo;s local development environment  [0.7.3] - 2020.08.10  add npm-installer.sh support php 7.4 bump up ruby 2.7.1  [0.7.2] - 2020.06.29  add tree add forwarded_port for MailHog  [0.7.1] - 2020.04.22  improve openssl role bump up php 7.3.17 bump up MariaDB 10.4 change loop from with_items to a list of packages fix git2u obsoleted  [0.7.0] - 2020.01.29  fix IUS repository url  [0.6.9] - 2019.11.20  bump up node version fix php config with phpenv.sh fix IUS repository url  [0.6.8] - 2019.10.02  fix php config with phpenv.sh improve kernel parameter bump up php version fix php-build.default_configure_options add Zstandard compression algorithm  [0.6.7] - 2019.07.19  bump up php codesniffer fix httpd.conf add choice of openssl installation, source or package  [0.6.6] - 2019.06.11  improve to add forwarded_port using array fix IUS repository url fix kernel parameter add .editorconfig add mysqltuner.pl bump up git version 2 or later fix client_max_body_size fix http2 config enable switch between prefork and event with apache bump up Apache version 2.4 improve version specification with openssl  [0.6.5] - 2019.03.12  modify kernel parameters remove hhvm  [0.6.4] - 2019.01.23  add CHANGELOG.md fix PHPUnit Selenium fix phpunit install  [0.6.3] - 2018.10.17  optimize vagrant box add wordpress plugin health-check add phpstan add peco add jq fix tests  [0.6.2] - 2018.09.23  fix tests fix gem install globally  [0.6.1] - 2018.09.17  separate files add multiple search-replace change to multiple search-replace for replace_old_url  [0.6.0] - 2018.09.03  enable ssl and https by default bump up ruby version 2.5.1 bump up Node version 8.11.4  [0.5.9] - 2018.08.02  improve phpenv.sh version 0.4.1 fix php-build.default_configure_options fix httpd.conf for apache mpm_event add other versions database tasks bump up MariaDB 10.3, MySQL 5.7, Percona 5.7  [0.5.8] - 2018.05.27  add deployer and git-ftp …","date":1542882375,"description":"","lastmod":"2020-10-18T15:26:15Z","objectID":"3bc95d58036a69fdd57635fa8a1d56f7","permalink":"https://thingsym.github.io/vaw/changelog/","publishdate":"2018-11-22T10:26:15Z","title":"Changelog"},{"content":"Default configuration Variables ID and password for the initial setting is as follows. Can be set in the provisioning configuration file.\nDatabase  ROOT USER root ROOT PASSWORD admin HOST localhost DATABASE NAME wordpress USER admin PASSWORD admin  WordPress Admin  USER admin PASSWORD admin  Customize Options You can build a variety of environment that edit configuration files of the VAW.\nThere are two configuration files you can customize.\n Vagrantfile group_vars/all.yml  Run vagrant up or vagrant provision, after editing the configuration files.\n","date":1508253975,"description":"","lastmod":"2017-10-17T15:26:15Z","objectID":"8142dabde8d4ef556ed9da8dbe0a37fe","permalink":"https://thingsym.github.io/vaw/configuration/","publishdate":"2017-10-17T15:26:15Z","title":"Configuration file"},{"content":"Provisioning configuration file (YAML) Provisioning configuration file is group_vars/all.yml.\nIn YAML format, you can set server, database and WordPress environment. And can enable the develop and deploy tools.\n## Server \u0026amp;amp; Database Settings ## server : apache # apache|nginx|h2o fastcgi : none # none|php-fpm database : mariadb # mariadb|mysql|percona db_root_password : admin db_host : localhost db_name : wordpress db_user : admin db_password : admin db_prefix : wp_ db_charset : \u0026#39;\u0026#39; db_collate : \u0026#39;\u0026#39; # utf8mb4_general_ci ## WordPress Settings ## title : VAW (Vagrant Ansible WordPress) admin_user : admin admin_password : admin admin_email : hoge@example.com # e.g. latest, nightly, 4.1, 4.1-beta1 # see Release Archive - https://wordpress.org/download/release-archive/ # 3.7 or later to work properly version : latest # e.g. en_US, ja, ... # see wordpress-i18n list - http://svn.automattic.com/wordpress-i18n/ lang : en_US # in own directory or subdirectory install. # see http://codex.wordpress.org/Giving_WordPress_Its_Own_Directory wp_dir : \u0026#39;\u0026#39; #e.g. /wordpress wp_site_path : \u0026#39;\u0026#39; #e.g. /wordpress multisite : false # true|false # default theme|slug|url|zip (local path, /vagrant/themes/*.zip) activate_theme : \u0026#39;\u0026#39; themes : [] # slug|url|zip (local path, /vagrant/plugins/*.zip) activate_plugins : - theme-check - log-deprecated-notices - debug-bar - query-monitor - broken-link-checker plugins : - developer - monster-widget - wordpress-beta-tester - wp-multibyte-patch theme_mod : {} # see Option Reference - http://codex.wordpress.org/Option_Reference options : {} # e.g. /%year%/%monthnum%/%postname% # see http://codex.wordpress.org/Using_Permalinks permalink_structure : structure : \u0026#39;\u0026#39; category : \u0026#39;\u0026#39; tag : \u0026#39;\u0026#39; # Any one of 4 ways to import import_xml_data : \u0026#39;\u0026#39; # local path, /vagrant/import/*.xml import_db_data : \u0026#39;\u0026#39; # local path, /vagrant/import/*.sql import_backwpup : path : \u0026#39;\u0026#39; # local path, /vagrant/import/*.zip db_data_file : \u0026#39;\u0026#39; xml_data_file : \u0026#39;\u0026#39; import_admin : false # true|false …","date":1542882375,"description":"","lastmod":"2019-03-24T15:26:15Z","objectID":"89c78f4d81db3499c3117765c0af41c3","permalink":"https://thingsym.github.io/vaw/configuration/all-yml/","publishdate":"2018-11-22T10:26:15Z","title":"all.yml"},{"content":"Vagrant configuration file (Ruby) Vagrant configuration file is Vagrantfile.\nVagrantfile will set the vagrant Box, private IP address, hostname and the document root.\nIf you launch multiple environments, change the name of the directory. Should rewrite vm_ip and vm_hostname. Note not to overlap with other environments.\nYou can accesse from a terminal in the same LAN to use the public network to Vagrant virtual environment. To use public networks, set IP address for bridged connection to public_ip. In that case, recommended that configure the same IP address to vm_hostname.\n## Vagrant Settings ## vm_box = \u0026#39;centos/7\u0026#39; vm_box_version = \u0026#39;\u0026amp;gt;= 0\u0026#39; vm_ip = \u0026#39;192.168.46.49\u0026#39; vm_hostname = \u0026#39;vaw.local\u0026#39; vm_document_root = \u0026#39;/var/www/html\u0026#39; public_ip = \u0026#39;\u0026#39; forwarded_port = [ 3000, 3001 ] vbguest_auto_update = true synced_folder_type = \u0026#39;virtualbox\u0026#39; # virtualbox|nfs|rsync|smb ansible_install_mode = :default # :default|:pip ansible_version = \u0026#39;latest\u0026#39; # only :pip required provision_mode = \u0026#39;all\u0026#39; # all|wordpress|box   vm_box (required) name of Vagrant Box (default: centos/7) vm_box_version (required) version of Vagrant Box (default: \u0026amp;gt;= 0) vm_ip (required) private IP address (default: 192.168.46.49) vm_hostname (required) hostname (default: vaw.local) vm_document_root (required) document root path (default: /var/www/html)  auto create wordpress directory and synchronized   public_ip IP address of bridged connection (default: \u0026#39;\u0026#39;) forwarded_port list of ports that you want to transfer (default: [ 3000, 3001 ]) vbguest_auto_update whether to update VirtualBox Guest Additions (default: true / value: true | false) synced_folder_type the type of synced folder (default: virtualbox / value: virtualbox | nfs | rsync | smb) ansible_install_mode (required) the way to install Ansible (default: :default / value: :default | :pip) ansible_version version of Ansible to install (default: latest) provision_mode (required) Provisioning mode (default: all / value: all | wordpress | box)  ","date":1542882375,"description":"","lastmod":"2018-11-22T10:26:15Z","objectID":"50c572d9bbd8affde69fcdbecfaf5c8c","permalink":"https://thingsym.github.io/vaw/configuration/vagrantfile/","publishdate":"2018-11-22T10:26:15Z","title":"Vagrantfile"},{"content":"Patches and Bug Fixes Small patches and bug reports can be submitted a issue tracker in Github. Forking on Github is another good way. You can send a pull request.\n Fork VAW from GitHub repository Create a feature branch: git checkout -b my-new-feature Commit your changes: git commit -am \u0026amp;lsquo;Add some feature\u0026amp;rsquo; Push to the branch: git push origin my-new-feature Create new Pull Request  ","date":1542882375,"description":"","lastmod":"2018-11-22T10:26:15Z","objectID":"96a7f4230e47c4f56c4dad1d3fdd8665","permalink":"https://thingsym.github.io/vaw/contribution/","publishdate":"2018-11-22T10:26:15Z","title":"Contribution"},{"content":"When you add a tuning configuration file that you edited in the directory config, place it at the time of provisioning. As follows editable configuration files.\n default-node-packages.j2 default-ruby-gems.j2 h2o.conf.j2 httpd.conf.centos6.j2 httpd.conf.centos7.j2 httpd.www.conf.centos7.j2 mariadb.my.cnf.j2 mysql.my.cnf.j2 nginx.conf.j2 nginx.multisite.conf.j2 nginx.wordpress.conf.j2 nginx.wordpress.multisite.conf.j2 percona.my.cnf.j2 php-build.default_configure_options.j2 ssh-config.j2  ","date":1523287575,"description":"","lastmod":"2019-03-24T15:26:15Z","objectID":"05fdb29a50bd5e907d81f4a3a7b75a69","permalink":"https://thingsym.github.io/vaw/custom-config/","publishdate":"2018-04-09T15:26:15Z","title":"Custom Config"},{"content":"Directory structure of the VAW is as follows.\nThis directory synchronize to the guest OS side /vagrant. wordpress creates automatically and synchronize to vm_document_root.\nwp-content is a directory that stores WordPress themes, plugins, and upload files. wp-content will be placed automatically in WordPress which was built at the time of provisioning, if you place wp-content in this directory from the production environment.\nuploads is a directory where stored upload files in wp-content directory of WordPress. uploads will be placed automatically in WordPress which was built at the time of provisioning, if you place uploads in this directory from the production environment.\nYou can create the same environment as the production environment, when you build a wordpress by import database dump data, substitution of url, regeneration of thumbnail image. You can set all from the provisioning configuration file.\nFull Layout  backup (stores backup file. create automatically at running script, if it does not exist.) command (stores shell script) config (stores Custom Config) config.sample (sample Custom Config) group_vars (stores the provisioning configuration file of Ansible)  all.yml (provisioning configuration file)   hosts  local (inventory file)   import (stores import data, if necessary) LICENSE (license file) plugins (stores WordPress plugin zip format files, if necessary) Rakefile (Rakefile of ServerSpec) README-ja.md README.md roles (stores Ansible playbook of each role) site.yml (Ansible playbook core file) spec (stores ServerSpec spec file)  box localhost spec_helper.rb sync-dir   themes (stores WordPress theme zip format files, if necessary) uploads (uploads directory in the wp-content) Vagrantfile (Vagrant configuration file) wordpress (synchronize to the Document Root. create automatically at vagrant up, if it does not exist.) wp-content (WordPress\u0026amp;rsquo;s wp-content directory)  Minimum Layout The VAW will be built in the directory structure of the following …","date":1542882375,"description":"","lastmod":"2018-11-22T10:26:15Z","objectID":"ec0faa772977e8407eac17957727421b","permalink":"https://thingsym.github.io/vaw/directory-layout/","publishdate":"2018-11-22T10:26:15Z","title":"Directory Layout"},{"content":"Usage 1. Install Virtualbox Download the VirtualBox form www.virtualbox.org and install.\n2. Install Vagrant Download the Vagrant form www.vagrantup.com and install.\n3. Install Vagrant plugin Install the Vagrant plugin on the terminal as necessary.\nvagrant plugin install vagrant-hostsupdater vagrant plugin install vagrant-vbguest vagrant plugin install vagrant-serverspec  4. Download Ansible playbooks of the VAW Download a Vagrantfile and Ansible playbooks from the following link.\nDownload Zip format file\n5. Launch a virtual environment cd vaw-x.x.x vagrant up  If you don\u0026amp;rsquo;t have a Box at first, begins from the download of Box. After provisioning, you can launch a WordPress development environment.\n6. Access to the website and the WordPress Admin Access to the website http://vaw.local/. Access to the WordPress admin http://vaw.local/wp-admin/.\n","date":1508253975,"description":"","lastmod":"2017-10-17T15:26:15Z","objectID":"dfae1d937010a359c06f3a1a5f0b3f0a","permalink":"https://thingsym.github.io/vaw/getting-started/","publishdate":"2017-10-17T15:26:15Z","title":"Getting Started"},{"content":" Oracle VM VirtualBox \u0026amp;gt;= 5.2 Vagrant \u0026amp;gt;= 2.1 Ansible \u0026amp;gt;= 2.4  Vagrant plugin (optional)  vagrant-hostsupdater vagrant-vbguest vagrant-serverspec  ","date":1526829975,"description":"","lastmod":"2018-05-20T15:26:15Z","objectID":"5fbba774e8c70c97b300c86e432989f5","permalink":"https://thingsym.github.io/vaw/getting-started/requirements/","publishdate":"2018-05-20T15:26:15Z","title":"Requirements"},{"content":"The VAW offers a useful scripts. Just run the script on a terminal. Database data backup, multiple versions installation of PHP, you can switch the execution environment.\ndb_backup.sh db_backup.sh will back up the database. Save at backup-%Y%m%d%H%M%S.sql format in the backup folder.\ncd /var/www/html /vagrant/command/db_backup.sh  phpenv.sh phpenv.sh will prepare the specified version of PHP execution environment. You can install the specified version of PHP. Switching the PHP version. And then restart Apache or PHP-FPM by switching the server configuration environment.\n/vagrant/command/phpenv.sh -v 7.2.1 -m php-fpm -s unix # help /vagrant/command/phpenv.sh -h  ","date":1542882375,"description":"","lastmod":"2018-11-22T10:26:15Z","objectID":"52299c98bc6af2fe874ff7a5f93ec5ff","permalink":"https://thingsym.github.io/vaw/helper-command/","publishdate":"2018-11-22T10:26:15Z","title":"Helper Command"},{"content":"The VAW is distributed under GPLv3.\nAuthor thingsym\nCopyright (c) 2014-2018 thingsym\n","date":1523287575,"description":"","lastmod":"2018-04-09T15:26:15Z","objectID":"671523e440fbf74932f440352ff9418a","permalink":"https://thingsym.github.io/vaw/license/","publishdate":"2018-04-09T15:26:15Z","title":"License"},{"content":"The VAW has three provisioning modes.\n all will normal provisioning from the pure Vagrant Box. wordpress provisions only sync folders including WordPress. box provision to create a Vagrant Box.  The VAW is characterized by being able to provision with various server and database configuration combinations. On the other hand, it takes time to build the environment from pure Vagrant Box.\nYou can create a Vagrant Box with server and database configuration in advance. By using the created Vagrant Box you can shorten the provisioning time.\nFirst, create a Vagrant Box with Provision mode box. Next, provision the created Vagrant Box with Provision mode wordpress. Based on the Vagrant Box you created, WordPress development environment will start quickly anytime.\n","date":1508253975,"description":"","lastmod":"2017-10-17T15:26:15Z","objectID":"ed7b1f186dd0fb40574bec8b986a9446","permalink":"https://thingsym.github.io/vaw/provisioning-mode/","publishdate":"2017-10-17T15:26:15Z","title":"Provisioning Mode"},{"content":"        var search = instantsearch({ indexName: \u0026#39;vaw_doc\u0026#39;, searchClient: algoliasearch( \u0026#39;DCXQ40Z7FZ\u0026#39;, \u0026#39;8b1fce019e261aab8b9bb88e518bd3b6\u0026#39; ), routing: true, }); const renderHits = (renderOptions, isFirstRender) = { const { hits } = renderOptions; document.querySelector(\u0026#39;#hits\u0026#39;).innerHTML = ` ${hits .map( item = `${ item.title }${ dayjs(item.lastmod).format(\u0026#34;YYYY/MM/DD\u0026#34;) } - ${ item.description ? item.description : item.content.length  200 ? item.content.substring( 0, 200 ) + \u0026#39;...\u0026#39; : item.content }\n` ) .join(\u0026#39;\u0026#39;)} `; }; const customHits = instantsearch.connectors.connectHits( renderHits ); search.addWidgets([ instantsearch.widgets.searchBox({ container: \u0026#39;#searchbox\u0026#39;, showReset: false, }), instantsearch.widgets.stats({ container: \u0026#39;#stats\u0026#39;, }), customHits({ container: document.querySelector(\u0026#39;#hits\u0026#39;), }), instantsearch.widgets.pagination({ container: \u0026#39;#pagination\u0026#39;, maxPages: 20, }) ]); search.start();  ","date":1589309346,"description":"","lastmod":"2020-05-12T18:49:06Z","objectID":"4953bf99d7018c161b1b361cb25f1331","permalink":"https://thingsym.github.io/vaw/search/","publishdate":"2020-05-12T18:49:06Z","title":"Search"},{"content":"Server (Selectable)  Apache nginx H2O  FastCGI (Selectable)  PHP-FPM (FastCGI Process Manager)  Database (Selectable)  MariaDB MySQL Percona MySQL  Pre-installing  WordPress phpenv php-build PHP (Zend OPcache, APCu) via phpenv Composer via phpenv OpenSSL (Selectable) WP-CLI Git  Develop Tools (Activatable)  Subversion gettext nodenv Node.js via nodenv npm Yarn Grunt gulp WordPress i18n tools Xdebug PHPUnit PHPUnit Selenium PHP_CodeSniffer \u0026amp;amp; WordPress Coding Standards Opcache Web Viewer (Opcache-Status, opcache-gui, ocp.php) cachetool wrk - Modern HTTP benchmarking tool plato stylestats PHPStan (Only PHP7) PHPMD webgrind MailHog  Deploy Tools (Activatable)  Dandelion Deployer Git-ftp Wordmove  Other  rbenv ruby-build Ruby via rbenv  Helper command  after_provision.sh before_provision.sh centos-box.sh db_backup.sh phpenv.sh  ","date":1542882375,"description":"","lastmod":"2019-03-24T15:26:15Z","objectID":"eb6875aa01279c104d2b2a656df7f0aa","permalink":"https://thingsym.github.io/vaw/specification/","publishdate":"2018-11-22T10:26:15Z","title":"Specification"},{"content":"The VAW supports VirtualBox for providers of Vagrant. Operating system and architecture supported centos-7.x x86_64 and centos-6.x x86_64 Vagrant Box. To download Vagrant Box, you can search from Discover Vagrant Boxes.\nBy default, the Vagrantfile uses the vaw/centos*-default Box which has already provisioned default settings.\nIn addition, you can use the vaw/centos*-full Box which has already provisioned default settings and activate develop and deploy tools.\nYou can build the environment in a short period of time compared with provisioning from the pure vagrant Box.\nCentOS 7  vaw/centos7-default vaw/centos7-full  CentOS 6  vaw/centos6-default vaw/centos6-full  ","date":1542882375,"description":"","lastmod":"2018-11-22T10:26:15Z","objectID":"cbc2fdb98d10cb76613a5304cbfaed9f","permalink":"https://thingsym.github.io/vaw/vagrant-box/","publishdate":"2018-11-22T10:26:15Z","title":"Vagrant Box"},{"content":"How to use the provisioning mode?\nLet\u0026amp;rsquo;s see how to make Vagrant Box through the process from provisioning with Vagrant Box to building WordPress development environment.\n1. Setting of configuration file We will launch the Vagrant environment for creating Vagrant Box. First of all, Set up the Vagrant configuration file and the provisioning configuration file.\nSet provision_mode in the Vagrant configuration file to box.\nprovision_mode = \u0026#39;box\u0026#39; # all|wordpress|box  You can set the provisioning configuration file as you like.\nHowever, if provision_mode is box, the WordPress Settings section of the provisioning configuration file will be skipped during provisioning.\n2. Provisioning Provision and build the environment.\nvagrant up  3. Creating a Vagrant Box (Packaging) After provisioning is completed, create a Vagrant Box with a box name. (e.g. sample.box)\nvagrant package --output sample.box  4. Registration of Vagrant Box Add the created Vagrant Box to Vagrant. (Register as eg sample)\nvagrant box add sample.box --name sample  You can delete the Vagrant Box file created for creating Vagrant Box. (e.g. sample.box) You can destroy the launched Vagrant environment after checking the operation.\nvagrant destroy  5. Provisioning with the created Vagrant Box Launch the Vagrant environment for WordPress development with the Vagrant Box you created. Set up the Vagrant configuration file and the provisioning configuration file.\nSet vm_box of the Vagrant configuration file to sample. (e.g. sample) Set provision_mode in the Vagrant configuration file to wordpress.\nvm_box = \u0026#39;sample\u0026#39; ... provision_mode = \u0026#39;wordpress\u0026#39; # all|wordpress|box  You can set the provisioning configuration file as you like.\nHowever, if provision_mode is wordpress, only the WordPress Settings section of the provisioning configuration file is enabled during provisioning.\n6. Launch a virtual environment vagrant up  After provisioning, you can launch a WordPress development environment.\n","date":1542882375,"description":"","lastmod":"2018-11-22T10:26:15Z","objectID":"3fc930f514442b277fd1f77f94a87c76","permalink":"https://thingsym.github.io/vaw/vagrant-box/how-to-make-vagrant-box/","publishdate":"2018-11-22T10:26:15Z","title":"How to make Vagrant Box"}]